/** @file opt.h
 *  @brief Provides the default options for the sheaperd library.
 *
 *  @author JK
 *  @bug No known bugs.
 */

#ifndef INTERNAL_OPT_H_
#define INTERNAL_OPT_H_

//included first so any user settings take precedence
#include "sheaperdopts.h"

#if SHEAPERD_NO_OS == 0
	#if SHEAPERD_CMSIS_1 == 1
		#include "cmsis_os.h"
	#elif SHEAPERD_CMSIS_2 == 1
		#include "cmsis_os2.h"
	#elif SHEAPERD_CMSIS_1 == 0 && SHEAPERD_CMSIS_2 == 0
		#define SHEAPERD_NO_OS 1
	#endif
#endif

#if SHEAPERD_STACK_GUARD == 0
	#define SHEAPERD_STACK_GUARD 			0
	#define SHEAPERD_MPU_M0PLUS				0
	#define SHEAPERD_MPU_M3_M4_M7			0
	#define SHEAPERD_MPU_M23				0
	#define	SHEAPERD_MPU_M33_M35P			0
	#define SHEAPERD_MPU_REGIONS			0
	#define STACKGUARD_USE_MEMFAULT_HANDLER 0
#endif

#if SHEAPERD_MPU_M23 == 1 || SHEAPERD_MPU_M33_M35P == 1
	#define SHEAPERD_ARMV8			1
#endif

#if SHEAPERD_MPU_M3_M4_M7 == 1
	#define SHEAPERD_ARMV7			1
#endif

#if SHEAPERD_MPU_M0PLUS == 1
	#define SHEAPERD_ARMV6			1
#endif

#ifndef SHEAPERD_DISABLE_CORTEXM3_M4_WRITE_BUFFERING
	#define SHEAPERD_DISABLE_CORTEXM3_M4_WRITE_BUFFERING 	1
#endif

#if SHEAPERD_SHEAP_MINIMUM_MALLOC_SIZE == 0
	#define SHEAPERD_SHEAP_MINIMUM_MALLOC_SIZE 		4
#endif
#if SHEAPERD_SHEAP_MINIMUM_MALLOC_SIZE < 4
	#define SHEAPERD_SHEAP_MINIMUM_MALLOC_SIZE 		4
#endif

#if SHEAPERD_USE_SNPRINTF_ASSERT == 1
	#define SHEAPERD_ASSERT_BUFFER_SIZE 	256
#endif

#if SHEAPERD_STACK_GUARD == 1
	#if STACKGUARD_USE_MEMFAULT_HANDLER == 1
		#define STACKGUARD_USE_MEMFAULT_HANDLER		1
	#endif
	#if STACKGUARD_NUMBER_OF_MPU_REGIONS == 0
		#define STACKGUARD_NUMBER_OF_MPU_REGIONS	8
	#endif
	#if STACKGUARD_DEFAULT_TASK_SWITCH_OUT_PERMISSION == 0
		#define STACKGUARD_DEFAULT_TASK_SWITCH_OUT_PERMISSION MPU_REGION_PRIVELEGED_RO
	#endif
#endif

#define ASSERT_TYPE(TYPE, VALUE) ((TYPE){ 0 } = (VALUE))
#define SHEAPERD_ASSERT(msg, assert, assertionType) 	\
do { 													\
	if (!(assert)) { 									\
		SHEAPERD_PORT_ASSERT(msg, assertionType);		\
	}													\
} while(0)

#if SHEAPERD_SHEAP_PC_LOG_SIZE <= 0
	#define SHEAP_PC_LOG_SIZE 			20
#endif

#ifndef SHEAPERD_SHEAP_CALLOC_VALUE
    #define SHEAPERD_SHEAP_CALLOC_VALUE 0
#endif

#ifndef SHEAPERD_SHEAP_FREE_CHECK_UNALIGNED_SIZE
	#define SHEAPERD_SHEAP_FREE_CHECK_UNALIGNED_SIZE	1
	#define SHEAPERD_SHEAP_OVERWRITE_ON_FREE			1
#endif
#ifndef SHEAPERD_SHEAP_OVERWRITE_VALUE
	#define SHEAPERD_SHEAP_OVERWRITE_VALUE				0xFF
#endif
#ifndef SHEAPERD_DEFAULT_MUTEX_WAIT_TICKS
	#define SHEAPERD_DEFAULT_MUTEX_WAIT_TICKS			100
#endif

// TODO: implement logic in sheap.c
#define SHEAPERD_SHEAP_MEMORY_ALLOCATION_FIRST_FIT			1
#ifndef SHEAPERD_SHEAP_MEMORY_ALLOCATION_STRATEGY
	#define SHEAPERD_SHEAP_MEMORY_ALLOCATION_STRATEGY  		SHEAPERD_SHEAP_MEMORY_ALLOCATION_FIRST_FIT
#endif

#ifndef SHEAPERD_SHEAP_USE_EXTENDED_HEADER
	#define SHEAPERD_SHEAP_USE_EXTENDED_HEADER				1
#endif

#if SHEAPERD_SHEAP_USE_EXTENDED_HEADER == 1
    #ifndef SHEAPERD_SHEAP_AUTO_CREATED_BLOCK_PC
        #define SHEAPERD_SHEAP_AUTO_CREATED_BLOCK_PC        1
    #endif
#endif

//TODO: implement logic in sheap.c
#define SHEAPERD_SHEAP_CHECK_ALL_BLOCKS_ON_FREE		0
#define SHEAPERD_SHEAP_CHECK_ALL_BLOCKS_ON_MALLOC	0

#define SHEAPERD_CRC32_POLY				0x04C11DB7
#define SHEAPERD_CRC32_XOR_OUT			0xFFFFFFFF

#define SHEAPERD_CRC16_POLY				0x1021
#define SHEAPERD_CRC16_XOR_OUT			0x0000

#endif /* INTERNAL_OPT_H_ */
